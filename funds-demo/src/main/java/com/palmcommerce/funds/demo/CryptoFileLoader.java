/**
 * 
 */
package com.palmcommerce.funds.demo;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;
import java.security.SignatureException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;

import org.bouncycastle.openssl.PEMReader;
import org.bouncycastle.openssl.PasswordFinder;




/**
 * 
 * Loading the Root CA file,Certification File ,Private Key
 * 
 * Generated by Openssl 
 * 
 * 
 * @author sparrow
 *
 */
public class CryptoFileLoader {

	static {
		Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
	}
	
	private static class Password implements PasswordFinder {
		char[] password;

		Password(char[] word) {
			this.password = word;
		}

		public char[] getPassword() {
			return password;
		}
	}

	/**
	 * 
	 */
	public CryptoFileLoader() {
		// TODO Auto-generated constructor stub
	}
	
	
	private PEMReader loadPEMByInputStream(InputStream in,PasswordFinder pGet){
		//InputStream res =null;
		PEMReader reader=null;
		try {
			
			Reader fRd = new BufferedReader(new InputStreamReader(in));
			reader= new PEMReader(fRd, pGet);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return reader;
	}
	
	private PEMReader openPEMResource(String fileName, PasswordFinder pGet)
			throws MalformedURLException, IOException {
		if(fileName==null)
			throw new FileNotFoundException("PEM Resource can't be empty!");
		PEMReader reader=null;
		InputStream res =null;
			
		res=fileName.startsWith("http://")?(new URL(fileName).openStream()):(new FileInputStream(fileName));
		reader=loadPEMByInputStream(res,pGet);
		return reader;
		
	}

	public PublicKey loadRootCa(String fileName) throws CertificateException,
			NoSuchProviderException, IOException {
	
		
		PEMReader pr = openPEMResource(fileName, null);
		if(pr==null)
			throw new IOException("Loading ROOTCA failed.");
		
		CertificateFactory fact = CertificateFactory.getInstance("X.509",
				"BC");
		ByteArrayInputStream bin = new ByteArrayInputStream(pr
				.readPemObject().getContent());
		java.security.cert.Certificate cert = fact.generateCertificate(bin);// (X509Certificate)fact.generateCertificate(bin);
		// /bin.close();
		PublicKey ca = cert.getPublicKey();

		pr.close();
		return ca;
	}
	
	

	public PublicKey loadCertificate(String crt,String ca)
			throws IOException, CertificateException,
			NoSuchProviderException, InvalidKeyException,
			NoSuchAlgorithmException, SignatureException {

		//PrivateKey localKey = null;
		
		PEMReader pr = openPEMResource(crt, null);
		
		if(pr==null)
			throw new IOException("Loading Crt failed.");

		CertificateFactory fact = CertificateFactory.getInstance("X.509",
				"BC");
		ByteArrayInputStream bin = new ByteArrayInputStream(pr
				.readPemObject().getContent());
		java.security.cert.Certificate cert = fact.generateCertificate(bin);// (X509Certificate)fact.generateCertificate(bin);
		// /bin.close();
		PublicKey remoteKey = cert.getPublicKey();
		PublicKey rootca = loadRootCa(ca);
		cert.verify(rootca);

		pr.close();
		return remoteKey;
	}

	public PrivateKey loadPrivateKey(String privateKey,String password,Class expectedPrivKeyClass)
			throws IOException {

		PrivateKey localKey = null;
		if(privateKey.startsWith("http"))
			throw new IOException("Private Key must not place in the network,must be local!");
		
		PEMReader pr = openPEMResource(privateKey,
				new Password(password.toCharArray()));
		
		if(pr==null)
			throw new IOException("Loading private key failed.");
		
		Object o = pr.readObject();
		pr.close();
		if (o == null || !(o instanceof KeyPair)) {
			// fail("Didn't find OpenSSL key");
		}

		KeyPair kp = (KeyPair) o;
		localKey = kp.getPrivate();

		if (!expectedPrivKeyClass.isInstance(localKey)) {
			// fail("Returned key not of correct type");
		}

		return localKey;
	}

}
