// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.palmcommerce.server.v29.db;

import com.palmcommerce.server.v29.db.UserOrder102;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect UserOrder102_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager UserOrder102.entityManager;
    
    public static final EntityManager UserOrder102.entityManager() {
        EntityManager em = new UserOrder102().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long UserOrder102.countUserOrder102s() {
        return entityManager().createQuery("SELECT COUNT(o) FROM UserOrder102 o", Long.class).getSingleResult();
    }
    
    public static List<UserOrder102> UserOrder102.findAllUserOrder102s() {
        return entityManager().createQuery("SELECT o FROM UserOrder102 o", UserOrder102.class).getResultList();
    }
    
    public static UserOrder102 UserOrder102.findUserOrder102(String orderId) {
        if (orderId == null || orderId.length() == 0) return null;
        return entityManager().find(UserOrder102.class, orderId);
    }
    
    public static List<UserOrder102> UserOrder102.findUserOrder102Entries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM UserOrder102 o", UserOrder102.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void UserOrder102.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void UserOrder102.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            UserOrder102 attached = UserOrder102.findUserOrder102(this.orderId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void UserOrder102.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void UserOrder102.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public UserOrder102 UserOrder102.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        UserOrder102 merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
