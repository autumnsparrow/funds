// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.palmcommerce.oss.jpa.model;

import com.palmcommerce.oss.jpa.model.OssTradeAjustmentOrder;
import java.math.BigDecimal;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect OssTradeAjustmentOrder_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager OssTradeAjustmentOrder.entityManager;
    
    public static final EntityManager OssTradeAjustmentOrder.entityManager() {
        EntityManager em = new OssTradeAjustmentOrder().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long OssTradeAjustmentOrder.countOssTradeAjustmentOrders() {
        return entityManager().createQuery("SELECT COUNT(o) FROM OssTradeAjustmentOrder o", Long.class).getSingleResult();
    }
    
    public static List<OssTradeAjustmentOrder> OssTradeAjustmentOrder.findAllOssTradeAjustmentOrders() {
        return entityManager().createQuery("SELECT o FROM OssTradeAjustmentOrder o", OssTradeAjustmentOrder.class).getResultList();
    }
    
    public static OssTradeAjustmentOrder OssTradeAjustmentOrder.findOssTradeAjustmentOrder(BigDecimal id) {
        if (id == null) return null;
        return entityManager().find(OssTradeAjustmentOrder.class, id);
    }
    
    public static List<OssTradeAjustmentOrder> OssTradeAjustmentOrder.findOssTradeAjustmentOrderEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM OssTradeAjustmentOrder o", OssTradeAjustmentOrder.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void OssTradeAjustmentOrder.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void OssTradeAjustmentOrder.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            OssTradeAjustmentOrder attached = OssTradeAjustmentOrder.findOssTradeAjustmentOrder(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void OssTradeAjustmentOrder.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void OssTradeAjustmentOrder.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public OssTradeAjustmentOrder OssTradeAjustmentOrder.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        OssTradeAjustmentOrder merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
