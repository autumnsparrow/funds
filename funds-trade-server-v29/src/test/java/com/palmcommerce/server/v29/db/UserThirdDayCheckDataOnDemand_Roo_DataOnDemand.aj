// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.palmcommerce.server.v29.db;

import com.palmcommerce.server.v29.db.UserThirdDayCheck;
import com.palmcommerce.server.v29.db.UserThirdDayCheckDataOnDemand;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect UserThirdDayCheckDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserThirdDayCheckDataOnDemand: @Component;
    
    private Random UserThirdDayCheckDataOnDemand.rnd = new SecureRandom();
    
    private List<UserThirdDayCheck> UserThirdDayCheckDataOnDemand.data;
    
    public UserThirdDayCheck UserThirdDayCheckDataOnDemand.getNewTransientUserThirdDayCheck(int index) {
        UserThirdDayCheck obj = new UserThirdDayCheck();
        setCheckDay(obj, index);
        setCheckStatus(obj, index);
        setCreateTime(obj, index);
        setPrizeCount(obj, index);
        setPrizeMoney(obj, index);
        setUnfundPrizeCount(obj, index);
        setUnfundPrizeMoney(obj, index);
        setUnfundVoteCount(obj, index);
        setUnfundVoteMoney(obj, index);
        setVoteCount(obj, index);
        setVoteMoney(obj, index);
        return obj;
    }
    
    public void UserThirdDayCheckDataOnDemand.setCheckDay(UserThirdDayCheck obj, int index) {
        String checkDay = "checkDay_" + index;
        if (checkDay.length() > 20) {
            checkDay = new Random().nextInt(10) + checkDay.substring(1, 20);
        }
        obj.setCheckDay(checkDay);
    }
    
    public void UserThirdDayCheckDataOnDemand.setCheckStatus(UserThirdDayCheck obj, int index) {
        BigDecimal checkStatus = BigDecimal.valueOf(index);
        obj.setCheckStatus(checkStatus);
    }
    
    public void UserThirdDayCheckDataOnDemand.setCreateTime(UserThirdDayCheck obj, int index) {
        Date createTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreateTime(createTime);
    }
    
    public void UserThirdDayCheckDataOnDemand.setPrizeCount(UserThirdDayCheck obj, int index) {
        BigDecimal prizeCount = BigDecimal.valueOf(index);
        obj.setPrizeCount(prizeCount);
    }
    
    public void UserThirdDayCheckDataOnDemand.setPrizeMoney(UserThirdDayCheck obj, int index) {
        BigDecimal prizeMoney = BigDecimal.valueOf(index);
        if (prizeMoney.compareTo(new BigDecimal("9999999999999.99")) == 1) {
            prizeMoney = new BigDecimal("9999999999999.99");
        }
        obj.setPrizeMoney(prizeMoney);
    }
    
    public void UserThirdDayCheckDataOnDemand.setUnfundPrizeCount(UserThirdDayCheck obj, int index) {
        BigDecimal unfundPrizeCount = BigDecimal.valueOf(index);
        obj.setUnfundPrizeCount(unfundPrizeCount);
    }
    
    public void UserThirdDayCheckDataOnDemand.setUnfundPrizeMoney(UserThirdDayCheck obj, int index) {
        BigDecimal unfundPrizeMoney = BigDecimal.valueOf(index);
        if (unfundPrizeMoney.compareTo(new BigDecimal("9999999999999.99")) == 1) {
            unfundPrizeMoney = new BigDecimal("9999999999999.99");
        }
        obj.setUnfundPrizeMoney(unfundPrizeMoney);
    }
    
    public void UserThirdDayCheckDataOnDemand.setUnfundVoteCount(UserThirdDayCheck obj, int index) {
        BigDecimal unfundVoteCount = BigDecimal.valueOf(index);
        obj.setUnfundVoteCount(unfundVoteCount);
    }
    
    public void UserThirdDayCheckDataOnDemand.setUnfundVoteMoney(UserThirdDayCheck obj, int index) {
        BigDecimal unfundVoteMoney = BigDecimal.valueOf(index);
        if (unfundVoteMoney.compareTo(new BigDecimal("9999999999999.99")) == 1) {
            unfundVoteMoney = new BigDecimal("9999999999999.99");
        }
        obj.setUnfundVoteMoney(unfundVoteMoney);
    }
    
    public void UserThirdDayCheckDataOnDemand.setVoteCount(UserThirdDayCheck obj, int index) {
        BigDecimal voteCount = BigDecimal.valueOf(index);
        obj.setVoteCount(voteCount);
    }
    
    public void UserThirdDayCheckDataOnDemand.setVoteMoney(UserThirdDayCheck obj, int index) {
        BigDecimal voteMoney = BigDecimal.valueOf(index);
        if (voteMoney.compareTo(new BigDecimal("9999999999999.99")) == 1) {
            voteMoney = new BigDecimal("9999999999999.99");
        }
        obj.setVoteMoney(voteMoney);
    }
    
    public UserThirdDayCheck UserThirdDayCheckDataOnDemand.getSpecificUserThirdDayCheck(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserThirdDayCheck obj = data.get(index);
        String id = obj.getId();
        return UserThirdDayCheck.findUserThirdDayCheck(id);
    }
    
    public UserThirdDayCheck UserThirdDayCheckDataOnDemand.getRandomUserThirdDayCheck() {
        init();
        UserThirdDayCheck obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getId();
        return UserThirdDayCheck.findUserThirdDayCheck(id);
    }
    
    public boolean UserThirdDayCheckDataOnDemand.modifyUserThirdDayCheck(UserThirdDayCheck obj) {
        return false;
    }
    
    public void UserThirdDayCheckDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserThirdDayCheck.findUserThirdDayCheckEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserThirdDayCheck' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserThirdDayCheck>();
        for (int i = 0; i < 10; i++) {
            UserThirdDayCheck obj = getNewTransientUserThirdDayCheck(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
