// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.palmcommerce.server.v29.db;

import com.palmcommerce.server.v29.db.UserInfoCancle;
import com.palmcommerce.server.v29.db.UserInfoCancleDataOnDemand;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect UserInfoCancleDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserInfoCancleDataOnDemand: @Component;
    
    private Random UserInfoCancleDataOnDemand.rnd = new SecureRandom();
    
    private List<UserInfoCancle> UserInfoCancleDataOnDemand.data;
    
    public UserInfoCancle UserInfoCancleDataOnDemand.getNewTransientUserInfoCancle(int index) {
        UserInfoCancle obj = new UserInfoCancle();
        setCreateTime(obj, index);
        setEmail(obj, index);
        setEmailStatus(obj, index);
        setFrezzTime(obj, index);
        setFrezzType(obj, index);
        setIvrPwd(obj, index);
        setLastOptTime(obj, index);
        setLevelType(obj, index);
        setPasswd(obj, index);
        setPhone(obj, index);
        setPwdAnswer(obj, index);
        setPwdQuestion(obj, index);
        setStatus(obj, index);
        setUserProvince(obj, index);
        return obj;
    }
    
    public void UserInfoCancleDataOnDemand.setCreateTime(UserInfoCancle obj, int index) {
        Date createTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreateTime(createTime);
    }
    
    public void UserInfoCancleDataOnDemand.setEmail(UserInfoCancle obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 50) {
            email = email.substring(0, 50);
        }
        obj.setEmail(email);
    }
    
    public void UserInfoCancleDataOnDemand.setEmailStatus(UserInfoCancle obj, int index) {
        BigDecimal emailStatus = BigDecimal.valueOf(index);
        obj.setEmailStatus(emailStatus);
    }
    
    public void UserInfoCancleDataOnDemand.setFrezzTime(UserInfoCancle obj, int index) {
        Date frezzTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFrezzTime(frezzTime);
    }
    
    public void UserInfoCancleDataOnDemand.setFrezzType(UserInfoCancle obj, int index) {
        BigDecimal frezzType = BigDecimal.valueOf(index);
        obj.setFrezzType(frezzType);
    }
    
    public void UserInfoCancleDataOnDemand.setIvrPwd(UserInfoCancle obj, int index) {
        String ivrPwd = "ivrPwd_" + index;
        if (ivrPwd.length() > 20) {
            ivrPwd = ivrPwd.substring(0, 20);
        }
        obj.setIvrPwd(ivrPwd);
    }
    
    public void UserInfoCancleDataOnDemand.setLastOptTime(UserInfoCancle obj, int index) {
        Date lastOptTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastOptTime(lastOptTime);
    }
    
    public void UserInfoCancleDataOnDemand.setLevelType(UserInfoCancle obj, int index) {
        BigDecimal levelType = BigDecimal.valueOf(index);
        obj.setLevelType(levelType);
    }
    
    public void UserInfoCancleDataOnDemand.setPasswd(UserInfoCancle obj, int index) {
        String passwd = "passwd_" + index;
        if (passwd.length() > 50) {
            passwd = passwd.substring(0, 50);
        }
        obj.setPasswd(passwd);
    }
    
    public void UserInfoCancleDataOnDemand.setPhone(UserInfoCancle obj, int index) {
        String phone = "phone_" + index;
        if (phone.length() > 20) {
            phone = phone.substring(0, 20);
        }
        obj.setPhone(phone);
    }
    
    public void UserInfoCancleDataOnDemand.setPwdAnswer(UserInfoCancle obj, int index) {
        String pwdAnswer = "pwdAnswer_" + index;
        if (pwdAnswer.length() > 50) {
            pwdAnswer = pwdAnswer.substring(0, 50);
        }
        obj.setPwdAnswer(pwdAnswer);
    }
    
    public void UserInfoCancleDataOnDemand.setPwdQuestion(UserInfoCancle obj, int index) {
        String pwdQuestion = "pwdQuestion_" + index;
        if (pwdQuestion.length() > 50) {
            pwdQuestion = pwdQuestion.substring(0, 50);
        }
        obj.setPwdQuestion(pwdQuestion);
    }
    
    public void UserInfoCancleDataOnDemand.setStatus(UserInfoCancle obj, int index) {
        BigDecimal status = BigDecimal.valueOf(index);
        obj.setStatus(status);
    }
    
    public void UserInfoCancleDataOnDemand.setUserProvince(UserInfoCancle obj, int index) {
        String userProvince = "userProv_" + index;
        if (userProvince.length() > 10) {
            userProvince = userProvince.substring(0, 10);
        }
        obj.setUserProvince(userProvince);
    }
    
    public UserInfoCancle UserInfoCancleDataOnDemand.getSpecificUserInfoCancle(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserInfoCancle obj = data.get(index);
        String id = obj.getUserId();
        return UserInfoCancle.findUserInfoCancle(id);
    }
    
    public UserInfoCancle UserInfoCancleDataOnDemand.getRandomUserInfoCancle() {
        init();
        UserInfoCancle obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getUserId();
        return UserInfoCancle.findUserInfoCancle(id);
    }
    
    public boolean UserInfoCancleDataOnDemand.modifyUserInfoCancle(UserInfoCancle obj) {
        return false;
    }
    
    public void UserInfoCancleDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserInfoCancle.findUserInfoCancleEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserInfoCancle' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserInfoCancle>();
        for (int i = 0; i < 10; i++) {
            UserInfoCancle obj = getNewTransientUserInfoCancle(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
