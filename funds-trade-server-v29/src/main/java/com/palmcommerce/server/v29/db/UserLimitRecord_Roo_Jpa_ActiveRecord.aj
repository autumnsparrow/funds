// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.palmcommerce.server.v29.db;

import com.palmcommerce.server.v29.db.UserLimitRecord;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect UserLimitRecord_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager UserLimitRecord.entityManager;
    
    public static final EntityManager UserLimitRecord.entityManager() {
        EntityManager em = new UserLimitRecord().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long UserLimitRecord.countUserLimitRecords() {
        return entityManager().createQuery("SELECT COUNT(o) FROM UserLimitRecord o", Long.class).getSingleResult();
    }
    
    public static List<UserLimitRecord> UserLimitRecord.findAllUserLimitRecords() {
        return entityManager().createQuery("SELECT o FROM UserLimitRecord o", UserLimitRecord.class).getResultList();
    }
    
    public static UserLimitRecord UserLimitRecord.findUserLimitRecord(String limitId) {
        if (limitId == null || limitId.length() == 0) return null;
        return entityManager().find(UserLimitRecord.class, limitId);
    }
    
    public static List<UserLimitRecord> UserLimitRecord.findUserLimitRecordEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM UserLimitRecord o", UserLimitRecord.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void UserLimitRecord.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void UserLimitRecord.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            UserLimitRecord attached = UserLimitRecord.findUserLimitRecord(this.limitId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void UserLimitRecord.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void UserLimitRecord.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public UserLimitRecord UserLimitRecord.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        UserLimitRecord merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
