// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.palmcommerce.server.v29.db;

import com.palmcommerce.server.v29.db.UserThirdPay;
import com.palmcommerce.server.v29.db.UserThirdPayDataOnDemand;
import com.palmcommerce.server.v29.db.UserThirdPayPK;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect UserThirdPayDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserThirdPayDataOnDemand: @Component;
    
    private Random UserThirdPayDataOnDemand.rnd = new SecureRandom();
    
    private List<UserThirdPay> UserThirdPayDataOnDemand.data;
    
    public UserThirdPay UserThirdPayDataOnDemand.getNewTransientUserThirdPay(int index) {
        UserThirdPay obj = new UserThirdPay();
        setEmbeddedIdClass(obj, index);
        return obj;
    }
    
    public void UserThirdPayDataOnDemand.setEmbeddedIdClass(UserThirdPay obj, int index) {
        String seriesNo = "seriesNo_" + index;
        if (seriesNo.length() > 50) {
            seriesNo = new Random().nextInt(10) + seriesNo.substring(1, 50);
        }
        String userId = "userId_" + index;
        if (userId.length() > 20) {
            userId = new Random().nextInt(10) + userId.substring(1, 20);
        }
        String userName = "userName_" + index;
        if (userName.length() > 50) {
            userName = new Random().nextInt(10) + userName.substring(1, 50);
        }
        BigDecimal money = BigDecimal.valueOf(index);
        String bankCode = "bankCode_" + index;
        if (bankCode.length() > 10) {
            bankCode = new Random().nextInt(10) + bankCode.substring(1, 10);
        }
        Date accountTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        String partnerId = "partnerId_" + index;
        if (partnerId.length() > 20) {
            partnerId = new Random().nextInt(10) + partnerId.substring(1, 20);
        }
        BigDecimal accountType = BigDecimal.valueOf(index);
        BigDecimal type = BigDecimal.valueOf(index);
        Date createTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        String reverseSeries = "reverseSeries_" + index;
        if (reverseSeries.length() > 50) {
            reverseSeries = new Random().nextInt(10) + reverseSeries.substring(1, 50);
        }
        String objid = "objid_" + index;
        if (objid.length() > 30) {
            objid = new Random().nextInt(10) + objid.substring(1, 30);
        }
        BigDecimal status = BigDecimal.valueOf(index);
        String phoneNo = "phoneNo_" + index;
        if (phoneNo.length() > 20) {
            phoneNo = new Random().nextInt(10) + phoneNo.substring(1, 20);
        }
        BigDecimal payType = BigDecimal.valueOf(index);
        String pid = "pid_" + index;
        if (pid.length() > 30) {
            pid = new Random().nextInt(10) + pid.substring(1, 30);
        }
        String cardNo = "cardNo_" + index;
        if (cardNo.length() > 30) {
            cardNo = new Random().nextInt(10) + cardNo.substring(1, 30);
        }
        
        UserThirdPayPK embeddedIdClass = new UserThirdPayPK(seriesNo, userId, userName, money, bankCode, accountTime, partnerId, accountType, type, createTime, reverseSeries, objid, status, phoneNo, payType, pid, cardNo);
        obj.setId(embeddedIdClass);
    }
    
    public UserThirdPay UserThirdPayDataOnDemand.getSpecificUserThirdPay(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserThirdPay obj = data.get(index);
        UserThirdPayPK id = obj.getId();
        return UserThirdPay.findUserThirdPay(id);
    }
    
    public UserThirdPay UserThirdPayDataOnDemand.getRandomUserThirdPay() {
        init();
        UserThirdPay obj = data.get(rnd.nextInt(data.size()));
        UserThirdPayPK id = obj.getId();
        return UserThirdPay.findUserThirdPay(id);
    }
    
    public boolean UserThirdPayDataOnDemand.modifyUserThirdPay(UserThirdPay obj) {
        return false;
    }
    
    public void UserThirdPayDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserThirdPay.findUserThirdPayEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserThirdPay' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserThirdPay>();
        for (int i = 0; i < 10; i++) {
            UserThirdPay obj = getNewTransientUserThirdPay(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
