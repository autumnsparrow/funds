// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.palmcommerce.server.v29.db;

import com.palmcommerce.server.v29.db.UserOrder108;
import com.palmcommerce.server.v29.db.UserOrder108DataOnDemand;
import com.palmcommerce.server.v29.db.UserOrder108IntegrationTest;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect UserOrder108IntegrationTest_Roo_IntegrationTest {
    
    declare @type: UserOrder108IntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: UserOrder108IntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: UserOrder108IntegrationTest: @Transactional;
    
    @Autowired
    UserOrder108DataOnDemand UserOrder108IntegrationTest.dod;
    
    @Test
    public void UserOrder108IntegrationTest.testCountUserOrder108s() {
        Assert.assertNotNull("Data on demand for 'UserOrder108' failed to initialize correctly", dod.getRandomUserOrder108());
        long count = UserOrder108.countUserOrder108s();
        Assert.assertTrue("Counter for 'UserOrder108' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void UserOrder108IntegrationTest.testFindUserOrder108() {
        UserOrder108 obj = dod.getRandomUserOrder108();
        Assert.assertNotNull("Data on demand for 'UserOrder108' failed to initialize correctly", obj);
        String id = obj.getOrderId();
        Assert.assertNotNull("Data on demand for 'UserOrder108' failed to provide an identifier", id);
        obj = UserOrder108.findUserOrder108(id);
        Assert.assertNotNull("Find method for 'UserOrder108' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'UserOrder108' returned the incorrect identifier", id, obj.getOrderId());
    }
    
    @Test
    public void UserOrder108IntegrationTest.testFindAllUserOrder108s() {
        Assert.assertNotNull("Data on demand for 'UserOrder108' failed to initialize correctly", dod.getRandomUserOrder108());
        long count = UserOrder108.countUserOrder108s();
        Assert.assertTrue("Too expensive to perform a find all test for 'UserOrder108', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<UserOrder108> result = UserOrder108.findAllUserOrder108s();
        Assert.assertNotNull("Find all method for 'UserOrder108' illegally returned null", result);
        Assert.assertTrue("Find all method for 'UserOrder108' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void UserOrder108IntegrationTest.testFindUserOrder108Entries() {
        Assert.assertNotNull("Data on demand for 'UserOrder108' failed to initialize correctly", dod.getRandomUserOrder108());
        long count = UserOrder108.countUserOrder108s();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<UserOrder108> result = UserOrder108.findUserOrder108Entries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'UserOrder108' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'UserOrder108' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void UserOrder108IntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'UserOrder108' failed to initialize correctly", dod.getRandomUserOrder108());
        UserOrder108 obj = dod.getNewTransientUserOrder108(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'UserOrder108' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'UserOrder108' identifier to be null", obj.getOrderId());
        obj.persist();
        obj.flush();
        Assert.assertNotNull("Expected 'UserOrder108' identifier to no longer be null", obj.getOrderId());
    }
    
    @Test
    public void UserOrder108IntegrationTest.testRemove() {
        UserOrder108 obj = dod.getRandomUserOrder108();
        Assert.assertNotNull("Data on demand for 'UserOrder108' failed to initialize correctly", obj);
        String id = obj.getOrderId();
        Assert.assertNotNull("Data on demand for 'UserOrder108' failed to provide an identifier", id);
        obj = UserOrder108.findUserOrder108(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'UserOrder108' with identifier '" + id + "'", UserOrder108.findUserOrder108(id));
    }
    
}
