// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.palmcommerce.server.v29.db;

import com.palmcommerce.server.v29.db.UserAccount;
import com.palmcommerce.server.v29.db.UserAccountCanclePK;
import com.palmcommerce.server.v29.db.UserAccountDataOnDemand;
import com.palmcommerce.server.v29.service.UserAccountService;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UserAccountDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserAccountDataOnDemand: @Component;
    
    private Random UserAccountDataOnDemand.rnd = new SecureRandom();
    
    private List<UserAccount> UserAccountDataOnDemand.data;
    
    @Autowired
    UserAccountService UserAccountDataOnDemand.userAccountService;
    
    public UserAccount UserAccountDataOnDemand.getNewTransientUserAccount(int index) {
        UserAccount obj = new UserAccount();
        setEmbeddedIdClass(obj, index);
        setCreateTime(obj, index);
        setCreditMoney(obj, index);
        setEffiectiveTime(obj, index);
        setEnable(obj, index);
        setFrezzMoney(obj, index);
        setMoney(obj, index);
        setOptTime(obj, index);
        setPUserId(obj, index);
        setPartnerId(obj, index);
        setTCreditMoney(obj, index);
        setUserId(obj, index);
        return obj;
    }
    
    public void UserAccountDataOnDemand.setEmbeddedIdClass(UserAccount obj, int index) {
        String userId = "userId_" + index;
        if (userId.length() > 30) {
            userId = new Random().nextInt(10) + userId.substring(1, 30);
        }
        String partnerId = "partnerId_" + index;
        if (partnerId.length() > 20) {
            partnerId = new Random().nextInt(10) + partnerId.substring(1, 20);
        }
        
        UserAccountCanclePK embeddedIdClass = new UserAccountCanclePK(userId, partnerId);
        obj.setId(embeddedIdClass);
    }
    
    public void UserAccountDataOnDemand.setCreateTime(UserAccount obj, int index) {
        Date createTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreateTime(createTime);
    }
    
    public void UserAccountDataOnDemand.setCreditMoney(UserAccount obj, int index) {
        BigDecimal creditMoney = BigDecimal.valueOf(index);
        if (creditMoney.compareTo(new BigDecimal("9999999999999.99")) == 1) {
            creditMoney = new BigDecimal("9999999999999.99");
        }
        obj.setCreditMoney(creditMoney);
    }
    
    public void UserAccountDataOnDemand.setEffiectiveTime(UserAccount obj, int index) {
        Date effiectiveTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEffiectiveTime(effiectiveTime);
    }
    
    public void UserAccountDataOnDemand.setEnable(UserAccount obj, int index) {
        BigDecimal enable = BigDecimal.valueOf(index);
        obj.setEnable(enable);
    }
    
    public void UserAccountDataOnDemand.setFrezzMoney(UserAccount obj, int index) {
        BigDecimal frezzMoney = BigDecimal.valueOf(index);
        if (frezzMoney.compareTo(new BigDecimal("9999999999999.99")) == 1) {
            frezzMoney = new BigDecimal("9999999999999.99");
        }
        obj.setFrezzMoney(frezzMoney);
    }
    
    public void UserAccountDataOnDemand.setMoney(UserAccount obj, int index) {
        BigDecimal money = BigDecimal.valueOf(index);
        if (money.compareTo(new BigDecimal("9999999999999.99")) == 1) {
            money = new BigDecimal("9999999999999.99");
        }
        obj.setMoney(money);
    }
    
    public void UserAccountDataOnDemand.setOptTime(UserAccount obj, int index) {
        Date optTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setOptTime(optTime);
    }
    
    public void UserAccountDataOnDemand.setPUserId(UserAccount obj, int index) {
        String pUserId = "pUserId_" + index;
        if (pUserId.length() > 40) {
            pUserId = new Random().nextInt(10) + pUserId.substring(1, 40);
        }
        obj.setPUserId(pUserId);
    }
    
    public void UserAccountDataOnDemand.setPartnerId(UserAccount obj, int index) {
        String partnerId = "partnerId_" + index;
        if (partnerId.length() > 20) {
            partnerId = new Random().nextInt(10) + partnerId.substring(1, 20);
        }
        obj.setPartnerId(partnerId);
    }
    
    public void UserAccountDataOnDemand.setTCreditMoney(UserAccount obj, int index) {
        BigDecimal tCreditMoney = BigDecimal.valueOf(index);
        if (tCreditMoney.compareTo(new BigDecimal("9999999999999.99")) == 1) {
            tCreditMoney = new BigDecimal("9999999999999.99");
        }
        obj.setTCreditMoney(tCreditMoney);
    }
    
    public void UserAccountDataOnDemand.setUserId(UserAccount obj, int index) {
        String userId = "userId_" + index;
        if (userId.length() > 30) {
            userId = new Random().nextInt(10) + userId.substring(1, 30);
        }
        obj.setUserId(userId);
    }
    
    public UserAccount UserAccountDataOnDemand.getSpecificUserAccount(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserAccount obj = data.get(index);
        UserAccountCanclePK id = obj.getId();
        return userAccountService.findUserAccount(id);
    }
    
    public UserAccount UserAccountDataOnDemand.getRandomUserAccount() {
        init();
        UserAccount obj = data.get(rnd.nextInt(data.size()));
        UserAccountCanclePK id = obj.getId();
        return userAccountService.findUserAccount(id);
    }
    
    public boolean UserAccountDataOnDemand.modifyUserAccount(UserAccount obj) {
        return false;
    }
    
    public void UserAccountDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = userAccountService.findUserAccountEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserAccount' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserAccount>();
        for (int i = 0; i < 10; i++) {
            UserAccount obj = getNewTransientUserAccount(i);
            try {
                userAccountService.saveUserAccount(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
