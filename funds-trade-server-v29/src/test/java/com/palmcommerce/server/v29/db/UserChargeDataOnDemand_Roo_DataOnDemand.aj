// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.palmcommerce.server.v29.db;

import com.palmcommerce.server.v29.db.UserCharge;
import com.palmcommerce.server.v29.db.UserChargeDataOnDemand;
import com.palmcommerce.server.v29.service.UserChargeService;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UserChargeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserChargeDataOnDemand: @Component;
    
    private Random UserChargeDataOnDemand.rnd = new SecureRandom();
    
    private List<UserCharge> UserChargeDataOnDemand.data;
    
    @Autowired
    UserChargeService UserChargeDataOnDemand.userChargeService;
    
    public UserCharge UserChargeDataOnDemand.getNewTransientUserCharge(int index) {
        UserCharge obj = new UserCharge();
        setBatchId(obj, index);
        setChargeType(obj, index);
        setCreateTime(obj, index);
        setIsSend(obj, index);
        setMoney(obj, index);
        setOperatorStatus(obj, index);
        setOrderId(obj, index);
        setPartnerId(obj, index);
        setPayOrderId(obj, index);
        setReturnCode(obj, index);
        setReturnMsg(obj, index);
        setStatus(obj, index);
        setType(obj, index);
        setUpdateTime(obj, index);
        setUserId(obj, index);
        return obj;
    }
    
    public void UserChargeDataOnDemand.setBatchId(UserCharge obj, int index) {
        String batchId = "batchId_" + index;
        if (batchId.length() > 30) {
            batchId = batchId.substring(0, 30);
        }
        obj.setBatchId(batchId);
    }
    
    public void UserChargeDataOnDemand.setChargeType(UserCharge obj, int index) {
        BigDecimal chargeType = BigDecimal.valueOf(index);
        obj.setChargeType(chargeType);
    }
    
    public void UserChargeDataOnDemand.setCreateTime(UserCharge obj, int index) {
        Date createTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreateTime(createTime);
    }
    
    public void UserChargeDataOnDemand.setIsSend(UserCharge obj, int index) {
        BigDecimal isSend = BigDecimal.valueOf(index);
        obj.setIsSend(isSend);
    }
    
    public void UserChargeDataOnDemand.setMoney(UserCharge obj, int index) {
        BigDecimal money = BigDecimal.valueOf(index);
        if (money.compareTo(new BigDecimal("9999999999999.99")) == 1) {
            money = new BigDecimal("9999999999999.99");
        }
        obj.setMoney(money);
    }
    
    public void UserChargeDataOnDemand.setOperatorStatus(UserCharge obj, int index) {
        BigDecimal operatorStatus = BigDecimal.valueOf(index);
        obj.setOperatorStatus(operatorStatus);
    }
    
    public void UserChargeDataOnDemand.setOrderId(UserCharge obj, int index) {
        String orderId = "orderId_" + index;
        if (orderId.length() > 30) {
            orderId = orderId.substring(0, 30);
        }
        obj.setOrderId(orderId);
    }
    
    public void UserChargeDataOnDemand.setPartnerId(UserCharge obj, int index) {
        String partnerId = "partnerId_" + index;
        if (partnerId.length() > 30) {
            partnerId = partnerId.substring(0, 30);
        }
        obj.setPartnerId(partnerId);
    }
    
    public void UserChargeDataOnDemand.setPayOrderId(UserCharge obj, int index) {
        String payOrderId = "payOrderId_" + index;
        if (payOrderId.length() > 30) {
            payOrderId = payOrderId.substring(0, 30);
        }
        obj.setPayOrderId(payOrderId);
    }
    
    public void UserChargeDataOnDemand.setReturnCode(UserCharge obj, int index) {
        String returnCode = "returnCode_" + index;
        if (returnCode.length() > 100) {
            returnCode = returnCode.substring(0, 100);
        }
        obj.setReturnCode(returnCode);
    }
    
    public void UserChargeDataOnDemand.setReturnMsg(UserCharge obj, int index) {
        String returnMsg = "returnMsg_" + index;
        if (returnMsg.length() > 3000) {
            returnMsg = returnMsg.substring(0, 3000);
        }
        obj.setReturnMsg(returnMsg);
    }
    
    public void UserChargeDataOnDemand.setStatus(UserCharge obj, int index) {
        BigDecimal status = BigDecimal.valueOf(index);
        obj.setStatus(status);
    }
    
    public void UserChargeDataOnDemand.setType(UserCharge obj, int index) {
        BigDecimal type = BigDecimal.valueOf(index);
        obj.setType(type);
    }
    
    public void UserChargeDataOnDemand.setUpdateTime(UserCharge obj, int index) {
        Date updateTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdateTime(updateTime);
    }
    
    public void UserChargeDataOnDemand.setUserId(UserCharge obj, int index) {
        String userId = "userId_" + index;
        if (userId.length() > 30) {
            userId = userId.substring(0, 30);
        }
        obj.setUserId(userId);
    }
    
    public UserCharge UserChargeDataOnDemand.getSpecificUserCharge(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserCharge obj = data.get(index);
        String id = obj.getChargeId();
        return userChargeService.findUserCharge(id);
    }
    
    public UserCharge UserChargeDataOnDemand.getRandomUserCharge() {
        init();
        UserCharge obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getChargeId();
        return userChargeService.findUserCharge(id);
    }
    
    public boolean UserChargeDataOnDemand.modifyUserCharge(UserCharge obj) {
        return false;
    }
    
    public void UserChargeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = userChargeService.findUserChargeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserCharge' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserCharge>();
        for (int i = 0; i < 10; i++) {
            UserCharge obj = getNewTransientUserCharge(i);
            try {
                userChargeService.saveUserCharge(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
