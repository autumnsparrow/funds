// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.palmcommerce.server.v29.db;

import com.palmcommerce.server.v29.db.UserStakeAccount;
import com.palmcommerce.server.v29.db.UserStakeAccountDataOnDemand;
import com.palmcommerce.server.v29.db.UserStakeAccountPK;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect UserStakeAccountDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserStakeAccountDataOnDemand: @Component;
    
    private Random UserStakeAccountDataOnDemand.rnd = new SecureRandom();
    
    private List<UserStakeAccount> UserStakeAccountDataOnDemand.data;
    
    public UserStakeAccount UserStakeAccountDataOnDemand.getNewTransientUserStakeAccount(int index) {
        UserStakeAccount obj = new UserStakeAccount();
        setEmbeddedIdClass(obj, index);
        setMoney(obj, index);
        setSendNum(obj, index);
        return obj;
    }
    
    public void UserStakeAccountDataOnDemand.setEmbeddedIdClass(UserStakeAccount obj, int index) {
        String activityId = "activityId_" + index;
        if (activityId.length() > 30) {
            activityId = new Random().nextInt(10) + activityId.substring(1, 30);
        }
        String partnerId = "partnerId_" + index;
        if (partnerId.length() > 20) {
            partnerId = new Random().nextInt(10) + partnerId.substring(1, 20);
        }
        String userId = "userId_" + index;
        if (userId.length() > 30) {
            userId = new Random().nextInt(10) + userId.substring(1, 30);
        }
        
        UserStakeAccountPK embeddedIdClass = new UserStakeAccountPK(activityId, partnerId, userId);
        obj.setId(embeddedIdClass);
    }
    
    public void UserStakeAccountDataOnDemand.setMoney(UserStakeAccount obj, int index) {
        BigDecimal money = BigDecimal.valueOf(index);
        if (money.compareTo(new BigDecimal("9999999999999.99")) == 1) {
            money = new BigDecimal("9999999999999.99");
        }
        obj.setMoney(money);
    }
    
    public void UserStakeAccountDataOnDemand.setSendNum(UserStakeAccount obj, int index) {
        BigDecimal sendNum = BigDecimal.valueOf(index);
        obj.setSendNum(sendNum);
    }
    
    public UserStakeAccount UserStakeAccountDataOnDemand.getSpecificUserStakeAccount(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserStakeAccount obj = data.get(index);
        UserStakeAccountPK id = obj.getId();
        return UserStakeAccount.findUserStakeAccount(id);
    }
    
    public UserStakeAccount UserStakeAccountDataOnDemand.getRandomUserStakeAccount() {
        init();
        UserStakeAccount obj = data.get(rnd.nextInt(data.size()));
        UserStakeAccountPK id = obj.getId();
        return UserStakeAccount.findUserStakeAccount(id);
    }
    
    public boolean UserStakeAccountDataOnDemand.modifyUserStakeAccount(UserStakeAccount obj) {
        return false;
    }
    
    public void UserStakeAccountDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserStakeAccount.findUserStakeAccountEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserStakeAccount' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserStakeAccount>();
        for (int i = 0; i < 10; i++) {
            UserStakeAccount obj = getNewTransientUserStakeAccount(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
