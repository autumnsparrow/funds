// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.palmcommerce.server.v29.db;

import com.palmcommerce.server.v29.db.UserBind;
import com.palmcommerce.server.v29.db.UserBindDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect UserBindDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserBindDataOnDemand: @Component;
    
    private Random UserBindDataOnDemand.rnd = new SecureRandom();
    
    private List<UserBind> UserBindDataOnDemand.data;
    
    public UserBind UserBindDataOnDemand.getNewTransientUserBind(int index) {
        UserBind obj = new UserBind();
        setCreateTime(obj, index);
        setPartnerId(obj, index);
        setPartnerUserId(obj, index);
        setUpdateTime(obj, index);
        setUserId(obj, index);
        return obj;
    }
    
    public void UserBindDataOnDemand.setCreateTime(UserBind obj, int index) {
        Date createTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreateTime(createTime);
    }
    
    public void UserBindDataOnDemand.setPartnerId(UserBind obj, int index) {
        String partnerId = "partnerId_" + index;
        if (partnerId.length() > 20) {
            partnerId = new Random().nextInt(10) + partnerId.substring(1, 20);
        }
        obj.setPartnerId(partnerId);
    }
    
    public void UserBindDataOnDemand.setPartnerUserId(UserBind obj, int index) {
        String partnerUserId = "partnerUserId_" + index;
        if (partnerUserId.length() > 30) {
            partnerUserId = new Random().nextInt(10) + partnerUserId.substring(1, 30);
        }
        obj.setPartnerUserId(partnerUserId);
    }
    
    public void UserBindDataOnDemand.setUpdateTime(UserBind obj, int index) {
        Date updateTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdateTime(updateTime);
    }
    
    public void UserBindDataOnDemand.setUserId(UserBind obj, int index) {
        String userId = "userId_" + index;
        if (userId.length() > 30) {
            userId = new Random().nextInt(10) + userId.substring(1, 30);
        }
        obj.setUserId(userId);
    }
    
    public UserBind UserBindDataOnDemand.getSpecificUserBind(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserBind obj = data.get(index);
        String id = obj.getUserBindId();
        return UserBind.findUserBind(id);
    }
    
    public UserBind UserBindDataOnDemand.getRandomUserBind() {
        init();
        UserBind obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getUserBindId();
        return UserBind.findUserBind(id);
    }
    
    public boolean UserBindDataOnDemand.modifyUserBind(UserBind obj) {
        return false;
    }
    
    public void UserBindDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserBind.findUserBindEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserBind' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserBind>();
        for (int i = 0; i < 10; i++) {
            UserBind obj = getNewTransientUserBind(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
