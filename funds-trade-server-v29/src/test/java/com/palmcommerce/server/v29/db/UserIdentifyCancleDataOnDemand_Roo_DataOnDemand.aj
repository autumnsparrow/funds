// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.palmcommerce.server.v29.db;

import com.palmcommerce.server.v29.db.UserIdentifyCancle;
import com.palmcommerce.server.v29.db.UserIdentifyCancleDataOnDemand;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect UserIdentifyCancleDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserIdentifyCancleDataOnDemand: @Component;
    
    private Random UserIdentifyCancleDataOnDemand.rnd = new SecureRandom();
    
    private List<UserIdentifyCancle> UserIdentifyCancleDataOnDemand.data;
    
    public UserIdentifyCancle UserIdentifyCancleDataOnDemand.getNewTransientUserIdentifyCancle(int index) {
        UserIdentifyCancle obj = new UserIdentifyCancle();
        setBankBranches(obj, index);
        setBankCity(obj, index);
        setBankProvince(obj, index);
        setBankcard(obj, index);
        setBankname(obj, index);
        setCardNo(obj, index);
        setCardType(obj, index);
        setCreateTime(obj, index);
        setLevelType(obj, index);
        setRealName(obj, index);
        setStatus(obj, index);
        setUpdateTime(obj, index);
        return obj;
    }
    
    public void UserIdentifyCancleDataOnDemand.setBankBranches(UserIdentifyCancle obj, int index) {
        String bankBranches = "bankBranches_" + index;
        if (bankBranches.length() > 50) {
            bankBranches = bankBranches.substring(0, 50);
        }
        obj.setBankBranches(bankBranches);
    }
    
    public void UserIdentifyCancleDataOnDemand.setBankCity(UserIdentifyCancle obj, int index) {
        String bankCity = "bankCity_" + index;
        if (bankCity.length() > 50) {
            bankCity = bankCity.substring(0, 50);
        }
        obj.setBankCity(bankCity);
    }
    
    public void UserIdentifyCancleDataOnDemand.setBankProvince(UserIdentifyCancle obj, int index) {
        String bankProvince = "bankProvince_" + index;
        if (bankProvince.length() > 50) {
            bankProvince = bankProvince.substring(0, 50);
        }
        obj.setBankProvince(bankProvince);
    }
    
    public void UserIdentifyCancleDataOnDemand.setBankcard(UserIdentifyCancle obj, int index) {
        String bankcard = "bankcard_" + index;
        if (bankcard.length() > 30) {
            bankcard = bankcard.substring(0, 30);
        }
        obj.setBankcard(bankcard);
    }
    
    public void UserIdentifyCancleDataOnDemand.setBankname(UserIdentifyCancle obj, int index) {
        String bankname = "bankname_" + index;
        if (bankname.length() > 30) {
            bankname = bankname.substring(0, 30);
        }
        obj.setBankname(bankname);
    }
    
    public void UserIdentifyCancleDataOnDemand.setCardNo(UserIdentifyCancle obj, int index) {
        String cardNo = "cardNo_" + index;
        if (cardNo.length() > 30) {
            cardNo = cardNo.substring(0, 30);
        }
        obj.setCardNo(cardNo);
    }
    
    public void UserIdentifyCancleDataOnDemand.setCardType(UserIdentifyCancle obj, int index) {
        String cardType = "c" + index;
        if (cardType.length() > 2) {
            cardType = cardType.substring(0, 2);
        }
        obj.setCardType(cardType);
    }
    
    public void UserIdentifyCancleDataOnDemand.setCreateTime(UserIdentifyCancle obj, int index) {
        Date createTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreateTime(createTime);
    }
    
    public void UserIdentifyCancleDataOnDemand.setLevelType(UserIdentifyCancle obj, int index) {
        BigDecimal levelType = BigDecimal.valueOf(index);
        obj.setLevelType(levelType);
    }
    
    public void UserIdentifyCancleDataOnDemand.setRealName(UserIdentifyCancle obj, int index) {
        String realName = "realName_" + index;
        if (realName.length() > 20) {
            realName = realName.substring(0, 20);
        }
        obj.setRealName(realName);
    }
    
    public void UserIdentifyCancleDataOnDemand.setStatus(UserIdentifyCancle obj, int index) {
        BigDecimal status = BigDecimal.valueOf(index);
        obj.setStatus(status);
    }
    
    public void UserIdentifyCancleDataOnDemand.setUpdateTime(UserIdentifyCancle obj, int index) {
        Date updateTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdateTime(updateTime);
    }
    
    public UserIdentifyCancle UserIdentifyCancleDataOnDemand.getSpecificUserIdentifyCancle(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserIdentifyCancle obj = data.get(index);
        String id = obj.getUserId();
        return UserIdentifyCancle.findUserIdentifyCancle(id);
    }
    
    public UserIdentifyCancle UserIdentifyCancleDataOnDemand.getRandomUserIdentifyCancle() {
        init();
        UserIdentifyCancle obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getUserId();
        return UserIdentifyCancle.findUserIdentifyCancle(id);
    }
    
    public boolean UserIdentifyCancleDataOnDemand.modifyUserIdentifyCancle(UserIdentifyCancle obj) {
        return false;
    }
    
    public void UserIdentifyCancleDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserIdentifyCancle.findUserIdentifyCancleEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserIdentifyCancle' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserIdentifyCancle>();
        for (int i = 0; i < 10; i++) {
            UserIdentifyCancle obj = getNewTransientUserIdentifyCancle(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
