// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.palmcommerce.oss.jpa.model;

import com.palmcommerce.oss.jpa.model.OssOperator;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect OssOperator_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager OssOperator.entityManager;
    
    public static final EntityManager OssOperator.entityManager() {
        EntityManager em = new OssOperator().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long OssOperator.countOssOperators() {
        return entityManager().createQuery("SELECT COUNT(o) FROM OssOperator o", Long.class).getSingleResult();
    }
    
    public static List<OssOperator> OssOperator.findAllOssOperators() {
        return entityManager().createQuery("SELECT o FROM OssOperator o", OssOperator.class).getResultList();
    }
    
    public static OssOperator OssOperator.findOssOperator(String vc2LoginName) {
        if (vc2LoginName == null || vc2LoginName.length() == 0) return null;
        return entityManager().find(OssOperator.class, vc2LoginName);
    }
    
    public static List<OssOperator> OssOperator.findOssOperatorEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM OssOperator o", OssOperator.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void OssOperator.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void OssOperator.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            OssOperator attached = OssOperator.findOssOperator(this.vc2LoginName);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void OssOperator.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void OssOperator.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public OssOperator OssOperator.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        OssOperator merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
