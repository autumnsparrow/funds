// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.palmcommerce.server.v29.db;

import com.palmcommerce.server.v29.db.UserAccountLog103;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect UserAccountLog103_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager UserAccountLog103.entityManager;
    
    public static final EntityManager UserAccountLog103.entityManager() {
        EntityManager em = new UserAccountLog103().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long UserAccountLog103.countUserAccountLog103s() {
        return entityManager().createQuery("SELECT COUNT(o) FROM UserAccountLog103 o", Long.class).getSingleResult();
    }
    
    public static List<UserAccountLog103> UserAccountLog103.findAllUserAccountLog103s() {
        return entityManager().createQuery("SELECT o FROM UserAccountLog103 o", UserAccountLog103.class).getResultList();
    }
    
    public static UserAccountLog103 UserAccountLog103.findUserAccountLog103(String logId) {
        if (logId == null || logId.length() == 0) return null;
        return entityManager().find(UserAccountLog103.class, logId);
    }
    
    public static List<UserAccountLog103> UserAccountLog103.findUserAccountLog103Entries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM UserAccountLog103 o", UserAccountLog103.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void UserAccountLog103.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void UserAccountLog103.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            UserAccountLog103 attached = UserAccountLog103.findUserAccountLog103(this.logId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void UserAccountLog103.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void UserAccountLog103.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public UserAccountLog103 UserAccountLog103.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        UserAccountLog103 merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
