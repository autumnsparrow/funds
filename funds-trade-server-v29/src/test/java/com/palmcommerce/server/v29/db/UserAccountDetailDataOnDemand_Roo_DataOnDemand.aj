// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.palmcommerce.server.v29.db;

import com.palmcommerce.server.v29.db.UserAccountDetail;
import com.palmcommerce.server.v29.db.UserAccountDetailDataOnDemand;
import com.palmcommerce.server.v29.db.UserAccountDetailPK;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect UserAccountDetailDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserAccountDetailDataOnDemand: @Component;
    
    private Random UserAccountDetailDataOnDemand.rnd = new SecureRandom();
    
    private List<UserAccountDetail> UserAccountDetailDataOnDemand.data;
    
    public UserAccountDetail UserAccountDetailDataOnDemand.getNewTransientUserAccountDetail(int index) {
        UserAccountDetail obj = new UserAccountDetail();
        setEmbeddedIdClass(obj, index);
        return obj;
    }
    
    public void UserAccountDetailDataOnDemand.setEmbeddedIdClass(UserAccountDetail obj, int index) {
        String userId = "userId_" + index;
        if (userId.length() > 30) {
            userId = new Random().nextInt(10) + userId.substring(1, 30);
        }
        String partnerId = "partnerId_" + index;
        if (partnerId.length() > 30) {
            partnerId = new Random().nextInt(10) + partnerId.substring(1, 30);
        }
        BigDecimal throwNum = BigDecimal.valueOf(index);
        BigDecimal throwAccount = BigDecimal.valueOf(index);
        if (throwAccount.compareTo(new BigDecimal("9999999999999.99")) == 1) {
            throwAccount = new BigDecimal("9999999999999.99");
        }
        BigDecimal prizeNum = BigDecimal.valueOf(index);
        BigDecimal prizeAccount = BigDecimal.valueOf(index);
        if (prizeAccount.compareTo(new BigDecimal("9999999999999.99")) == 1) {
            prizeAccount = new BigDecimal("9999999999999.99");
        }
        BigDecimal chargeNum = BigDecimal.valueOf(index);
        BigDecimal chargeAccount = BigDecimal.valueOf(index);
        if (chargeAccount.compareTo(new BigDecimal("9999999999999.99")) == 1) {
            chargeAccount = new BigDecimal("9999999999999.99");
        }
        BigDecimal encashNum = BigDecimal.valueOf(index);
        BigDecimal encashAccount = BigDecimal.valueOf(index);
        if (encashAccount.compareTo(new BigDecimal("9999999999999.99")) == 1) {
            encashAccount = new BigDecimal("9999999999999.99");
        }
        BigDecimal bigPrizeNum = BigDecimal.valueOf(index);
        BigDecimal bigPrizeAccount = BigDecimal.valueOf(index);
        if (bigPrizeAccount.compareTo(new BigDecimal("9999999999999.99")) == 1) {
            bigPrizeAccount = new BigDecimal("9999999999999.99");
        }
        
        UserAccountDetailPK embeddedIdClass = new UserAccountDetailPK(userId, partnerId, throwNum, throwAccount, prizeNum, prizeAccount, chargeNum, chargeAccount, encashNum, encashAccount, bigPrizeNum, bigPrizeAccount);
        obj.setId(embeddedIdClass);
    }
    
    public UserAccountDetail UserAccountDetailDataOnDemand.getSpecificUserAccountDetail(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserAccountDetail obj = data.get(index);
        UserAccountDetailPK id = obj.getId();
        return UserAccountDetail.findUserAccountDetail(id);
    }
    
    public UserAccountDetail UserAccountDetailDataOnDemand.getRandomUserAccountDetail() {
        init();
        UserAccountDetail obj = data.get(rnd.nextInt(data.size()));
        UserAccountDetailPK id = obj.getId();
        return UserAccountDetail.findUserAccountDetail(id);
    }
    
    public boolean UserAccountDetailDataOnDemand.modifyUserAccountDetail(UserAccountDetail obj) {
        return false;
    }
    
    public void UserAccountDetailDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserAccountDetail.findUserAccountDetailEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserAccountDetail' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserAccountDetail>();
        for (int i = 0; i < 10; i++) {
            UserAccountDetail obj = getNewTransientUserAccountDetail(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
