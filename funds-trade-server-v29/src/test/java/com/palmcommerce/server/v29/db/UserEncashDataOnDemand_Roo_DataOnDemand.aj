// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.palmcommerce.server.v29.db;

import com.palmcommerce.server.v29.db.UserEncash;
import com.palmcommerce.server.v29.db.UserEncashDataOnDemand;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect UserEncashDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserEncashDataOnDemand: @Component;
    
    private Random UserEncashDataOnDemand.rnd = new SecureRandom();
    
    private List<UserEncash> UserEncashDataOnDemand.data;
    
    public UserEncash UserEncashDataOnDemand.getNewTransientUserEncash(int index) {
        UserEncash obj = new UserEncash();
        setBankBranch(obj, index);
        setBankCard(obj, index);
        setBankCity(obj, index);
        setBankName(obj, index);
        setBankProvince(obj, index);
        setBatchId(obj, index);
        setCreateTime(obj, index);
        setExtendMoney(obj, index);
        setMoney(obj, index);
        setOperateDesc(obj, index);
        setOperateTime(obj, index);
        setOperateType(obj, index);
        setPartnerId(obj, index);
        setStatus(obj, index);
        setUserId(obj, index);
        return obj;
    }
    
    public void UserEncashDataOnDemand.setBankBranch(UserEncash obj, int index) {
        String bankBranch = "bankBranch_" + index;
        if (bankBranch.length() > 50) {
            bankBranch = bankBranch.substring(0, 50);
        }
        obj.setBankBranch(bankBranch);
    }
    
    public void UserEncashDataOnDemand.setBankCard(UserEncash obj, int index) {
        String bankCard = "bankCard_" + index;
        if (bankCard.length() > 30) {
            bankCard = bankCard.substring(0, 30);
        }
        obj.setBankCard(bankCard);
    }
    
    public void UserEncashDataOnDemand.setBankCity(UserEncash obj, int index) {
        String bankCity = "bankCity_" + index;
        if (bankCity.length() > 50) {
            bankCity = bankCity.substring(0, 50);
        }
        obj.setBankCity(bankCity);
    }
    
    public void UserEncashDataOnDemand.setBankName(UserEncash obj, int index) {
        String bankName = "bankName_" + index;
        if (bankName.length() > 20) {
            bankName = bankName.substring(0, 20);
        }
        obj.setBankName(bankName);
    }
    
    public void UserEncashDataOnDemand.setBankProvince(UserEncash obj, int index) {
        String bankProvince = "bankProvince_" + index;
        if (bankProvince.length() > 50) {
            bankProvince = bankProvince.substring(0, 50);
        }
        obj.setBankProvince(bankProvince);
    }
    
    public void UserEncashDataOnDemand.setBatchId(UserEncash obj, int index) {
        String batchId = "batchId_" + index;
        if (batchId.length() > 20) {
            batchId = batchId.substring(0, 20);
        }
        obj.setBatchId(batchId);
    }
    
    public void UserEncashDataOnDemand.setCreateTime(UserEncash obj, int index) {
        Date createTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreateTime(createTime);
    }
    
    public void UserEncashDataOnDemand.setExtendMoney(UserEncash obj, int index) {
        BigDecimal extendMoney = BigDecimal.valueOf(index);
        if (extendMoney.compareTo(new BigDecimal("9999999999999.99")) == 1) {
            extendMoney = new BigDecimal("9999999999999.99");
        }
        obj.setExtendMoney(extendMoney);
    }
    
    public void UserEncashDataOnDemand.setMoney(UserEncash obj, int index) {
        BigDecimal money = BigDecimal.valueOf(index);
        if (money.compareTo(new BigDecimal("9999999999999.99")) == 1) {
            money = new BigDecimal("9999999999999.99");
        }
        obj.setMoney(money);
    }
    
    public void UserEncashDataOnDemand.setOperateDesc(UserEncash obj, int index) {
        String operateDesc = "operateDesc_" + index;
        if (operateDesc.length() > 50) {
            operateDesc = operateDesc.substring(0, 50);
        }
        obj.setOperateDesc(operateDesc);
    }
    
    public void UserEncashDataOnDemand.setOperateTime(UserEncash obj, int index) {
        Date operateTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setOperateTime(operateTime);
    }
    
    public void UserEncashDataOnDemand.setOperateType(UserEncash obj, int index) {
        BigDecimal operateType = BigDecimal.valueOf(index);
        obj.setOperateType(operateType);
    }
    
    public void UserEncashDataOnDemand.setPartnerId(UserEncash obj, int index) {
        String partnerId = "partnerId_" + index;
        if (partnerId.length() > 30) {
            partnerId = partnerId.substring(0, 30);
        }
        obj.setPartnerId(partnerId);
    }
    
    public void UserEncashDataOnDemand.setStatus(UserEncash obj, int index) {
        BigDecimal status = BigDecimal.valueOf(index);
        obj.setStatus(status);
    }
    
    public void UserEncashDataOnDemand.setUserId(UserEncash obj, int index) {
        String userId = "userId_" + index;
        if (userId.length() > 30) {
            userId = userId.substring(0, 30);
        }
        obj.setUserId(userId);
    }
    
    public UserEncash UserEncashDataOnDemand.getSpecificUserEncash(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserEncash obj = data.get(index);
        String id = obj.getEncashId();
        return UserEncash.findUserEncash(id);
    }
    
    public UserEncash UserEncashDataOnDemand.getRandomUserEncash() {
        init();
        UserEncash obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getEncashId();
        return UserEncash.findUserEncash(id);
    }
    
    public boolean UserEncashDataOnDemand.modifyUserEncash(UserEncash obj) {
        return false;
    }
    
    public void UserEncashDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserEncash.findUserEncashEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserEncash' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserEncash>();
        for (int i = 0; i < 10; i++) {
            UserEncash obj = getNewTransientUserEncash(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
