// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.palmcommerce.funds.roo.model;

import com.palmcommerce.funds.roo.model.ScheduledTaskState;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ScheduledTaskState_Roo_Finder {
    
    public static TypedQuery<ScheduledTaskState> ScheduledTaskState.findScheduledTaskStatesByBankDateEquals(Date bankDate) {
        if (bankDate == null) throw new IllegalArgumentException("The bankDate argument is required");
        EntityManager em = ScheduledTaskState.entityManager();
        TypedQuery<ScheduledTaskState> q = em.createQuery("SELECT o FROM ScheduledTaskState AS o WHERE o.bankDate = :bankDate", ScheduledTaskState.class);
        q.setParameter("bankDate", bankDate);
        return q;
    }
    
    public static TypedQuery<ScheduledTaskState> ScheduledTaskState.findScheduledTaskStatesByBankDateEqualsAndBankCodeEquals(Date bankDate, String bankCode) {
        if (bankDate == null) throw new IllegalArgumentException("The bankDate argument is required");
        if (bankCode == null || bankCode.length() == 0) throw new IllegalArgumentException("The bankCode argument is required");
        EntityManager em = ScheduledTaskState.entityManager();
        TypedQuery<ScheduledTaskState> q = em.createQuery("SELECT o FROM ScheduledTaskState AS o WHERE o.bankDate = :bankDate  AND o.bankCode = :bankCode", ScheduledTaskState.class);
        q.setParameter("bankDate", bankDate);
        q.setParameter("bankCode", bankCode);
        return q;
    }
    
    public static TypedQuery<ScheduledTaskState> ScheduledTaskState.findScheduledTaskStatesByBankDateEqualsAndIsBank(Date bankDate, int isBank) {
        if (bankDate == null) throw new IllegalArgumentException("The bankDate argument is required");
        EntityManager em = ScheduledTaskState.entityManager();
        TypedQuery<ScheduledTaskState> q = em.createQuery("SELECT o FROM ScheduledTaskState AS o WHERE o.bankDate = :bankDate  AND o.isBank = :isBank", ScheduledTaskState.class);
        q.setParameter("bankDate", bankDate);
        q.setParameter("isBank", isBank);
        return q;
    }
    
    public static TypedQuery<ScheduledTaskState> ScheduledTaskState.findScheduledTaskStatesByBankDateEqualsAndIsBankNot(Date bankDate, int isBank) {
        if (bankDate == null) throw new IllegalArgumentException("The bankDate argument is required");
        EntityManager em = ScheduledTaskState.entityManager();
        TypedQuery<ScheduledTaskState> q = em.createQuery("SELECT o FROM ScheduledTaskState AS o WHERE o.bankDate = :bankDate  AND o.isBank IS NOT :isBank", ScheduledTaskState.class);
        q.setParameter("bankDate", bankDate);
        q.setParameter("isBank", isBank);
        return q;
    }
    
    public static TypedQuery<ScheduledTaskState> ScheduledTaskState.findScheduledTaskStatesByBankDateEqualsAndTradecodeEquals(Date bankDate, String tradecode) {
        if (bankDate == null) throw new IllegalArgumentException("The bankDate argument is required");
        if (tradecode == null || tradecode.length() == 0) throw new IllegalArgumentException("The tradecode argument is required");
        EntityManager em = ScheduledTaskState.entityManager();
        TypedQuery<ScheduledTaskState> q = em.createQuery("SELECT o FROM ScheduledTaskState AS o WHERE o.bankDate = :bankDate  AND o.tradecode = :tradecode", ScheduledTaskState.class);
        q.setParameter("bankDate", bankDate);
        q.setParameter("tradecode", tradecode);
        return q;
    }
    
    public static TypedQuery<ScheduledTaskState> ScheduledTaskState.findScheduledTaskStatesByBankDateEqualsAndTranscodeEquals(Date bankDate, String transcode) {
        if (bankDate == null) throw new IllegalArgumentException("The bankDate argument is required");
        if (transcode == null || transcode.length() == 0) throw new IllegalArgumentException("The transcode argument is required");
        EntityManager em = ScheduledTaskState.entityManager();
        TypedQuery<ScheduledTaskState> q = em.createQuery("SELECT o FROM ScheduledTaskState AS o WHERE o.bankDate = :bankDate  AND o.transcode = :transcode", ScheduledTaskState.class);
        q.setParameter("bankDate", bankDate);
        q.setParameter("transcode", transcode);
        return q;
    }
    
}
